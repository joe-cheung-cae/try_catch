name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    name: Build and Test (${{ matrix.os }} / exceptions=${{ matrix.exceptions }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        exceptions: [on, off]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v1

      - name: Configure
        shell: bash
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug

      - name: Build (exceptions on)
        run: cmake --build build --config Debug --parallel 2

      - name: Test (exceptions on)
        run: ctest --test-dir build --output-on-failure -C Debug

      - name: Build/Test (exceptions off)
        if: matrix.exceptions == 'off'
        run: |
          cmake --build build --target tc_tests_noex --config Debug --parallel 2
          ctest --test-dir build -C Debug -R tc_tests_noex --output-on-failure

      - name: Lint (clang-format)
        if: matrix.os == 'ubuntu-latest' && matrix.exceptions == 'on'
        run: |
          sudo apt-get update && sudo apt-get install -y clang-format
          # Show version for reproducibility
          clang-format --version
          # Run in check mode; do not modify files (-i removed). Use style from repo file explicitly.
          git ls-files '*.hpp' '*.h' '*.cpp' | xargs -r clang-format --style=file --dry-run --Werror
          # (Optional) If future auto-fix desired, uncomment below to detect diff after formatting copy.
          # tmpdir=$(mktemp -d)
          # git ls-files '*.hpp' '*.h' '*.cpp' | while read f; do cp "$f" "$tmpdir/$f"; done
          # (apply formatting to copies) git ls-files '*.hpp' '*.h' '*.cpp' | xargs -r -I{} sh -c 'clang-format --style=file {} > "$tmpdir/{}"'
          # diff -ru --label=orig --label=formatted . "$tmpdir" | head -200

      - name: Analyze (clang-tidy)
        if: matrix.os == 'ubuntu-latest' && matrix.exceptions == 'on'
        run: |
          sudo apt-get update && sudo apt-get install -y clang-tidy
          cmake -S . -B build-tidy -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cmake --build build-tidy --parallel 2
          run-clang-tidy -p build-tidy || true
